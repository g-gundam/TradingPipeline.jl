var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TradingPipeline","category":"page"},{"location":"#TradingPipeline","page":"Home","title":"TradingPipeline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TradingPipeline.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TradingPipeline]","category":"page"},{"location":"#TradingPipeline.simulate_sanity_check_failure_error","page":"Home","title":"TradingPipeline.simulate_sanity_check_failure_error","text":"simulate_sanity_check_failure_error is a tuple filled with a lot of nothing values so that code that's @unpack'ing return values from simulate() don't crash.\n\n\n\n\n\n","category":"constant"},{"location":"#TradingPipeline.AbstractExchangeResponse","page":"Home","title":"TradingPipeline.AbstractExchangeResponse","text":"An AbstractExchangeResponse represents a message that was received from an ExchangeFillSubject. The most common is ExchangeFill which lets the StrategySubject know that after putting out an intent to open or close a position, the exchange has filled the order and the requested position change has occurred.\n\nExample\n\njulia> subtypes(TradingPipeline.AbstractExchangeResponse)\n\n\n\n\n\n","category":"type"},{"location":"#TradingPipeline.AbstractManualCommand","page":"Home","title":"TradingPipeline.AbstractManualCommand","text":"An AbstractManualCommand represents a manual intervention from a human to the StrategySubject.\n\nExample\n\njulia> subtypes(TradingPipeline.AbstractExchangeResponse)\n\n\n\n\n\n","category":"type"},{"location":"#TechnicalIndicatorCharts.visualize-Tuple{Tuple{TechnicalIndicatorCharts.Chart, ExchangeOperations.AbstractSession}}","page":"Home","title":"TechnicalIndicatorCharts.visualize","text":"visualize(\n    t::Tuple{TechnicalIndicatorCharts.Chart, ExchangeOperations.AbstractSession};\n    kwargs...\n) -> LightweightCharts.LWCLayout\n\n\nLet's see if I can visualize trades on top of a chart.\n\n\n\n\n\n","category":"method"},{"location":"#TradingPipeline.around-Tuple{Dates.DateTime, DataFrames.AbstractDataFrame}","page":"Home","title":"TradingPipeline.around","text":"around(\n    ts::Dates.DateTime,\n    df::DataFrames.AbstractDataFrame;\n    before,\n    after,\n    ts_field\n) -> Any\n\n\nReturn a few rows before and after the given timestamp ts in the DataFrame df.\n\n\n\n\n\n","category":"method"},{"location":"#TradingPipeline.decide-Tuple{TradingPipeline.AbstractStrategy, TradingPipeline.Neutral}","page":"Home","title":"TradingPipeline.decide","text":"decide(strategy::AbstractStrategy, state::HSM.AbstractHsmState)\n-> Union{Nothing, TradeDecision.T}\n\nThe decide method takes the current strategy and the current state according to the state machine, and looks at the market data available to it to make a decision.  Often, it decides to return nothing, but if conditions as defined by the strategy are met, it could return an HSM.AbstractHsmEvent which will cause the state machine to move to the next appropriate state.\n\nThere are decide methods for every state in the state machine.\n\n\n\n\n\n","category":"method"},{"location":"#TradingPipeline.load_strategy-Tuple{Type{TradingPipeline.GoldenCrossStrategy}}","page":"Home","title":"TradingPipeline.load_strategy","text":"Initialize a long-only simple golden cross strategy.\n\n\n\n\n\n","category":"method"},{"location":"#TradingPipeline.load_strategy-Tuple{Type{TradingPipeline.HMAStrategy}}","page":"Home","title":"TradingPipeline.load_strategy","text":"Initialize a long-only hma strategy.\n\nLooking for 330/440 crosses\n\n\n\n\n\n","category":"method"},{"location":"#TradingPipeline.pnl-Tuple{Long}","page":"Home","title":"TradingPipeline.pnl","text":"pnl(long::Long) -> TradingPipeline.Result\n\n\nCalculate profit/loss of a long position.\n\n\n\n\n\n","category":"method"},{"location":"#TradingPipeline.pnl-Tuple{Short}","page":"Home","title":"TradingPipeline.pnl","text":"pnl(short::Short) -> TradingPipeline.Result\n\n\nCalculate profit/loss of a short position.\n\n\n\n\n\n","category":"method"},{"location":"#TradingPipeline.qty-Tuple{Contracts, Number}","page":"Home","title":"TradingPipeline.qty","text":"qty(c::Contracts, price::Number)\n\nConvert contracts into the equivalent quantity of the asset being traded.\n\n\n\n\n\n","category":"method"},{"location":"#TradingPipeline.qty-Tuple{Number, Number}","page":"Home","title":"TradingPipeline.qty","text":"qty(n::Number, price::Number)\n\nThis just returns n since the quantity n.\n\n\n\n\n\n","category":"method"},{"location":"#TradingPipeline.report-Tuple{ExchangeOperations.SimulatorSession}","page":"Home","title":"TradingPipeline.report","text":"report(session::XO.SimulatorSession) -> DataFrame\n\nReturn a list of trades that happened during the simulator session.\n\n\n\n\n\n","category":"method"},{"location":"#TradingPipeline.simulate-Tuple{Any, Type{<:TradingPipeline.AbstractStrategy}}","page":"Home","title":"TradingPipeline.simulate","text":"simulate(\n    candle_observable,\n    strategy_type::Type{<:TradingPipeline.AbstractStrategy};\n    kwargs...\n) -> Any\n\n\nRun a strategy on the simulator using the given candle_observable.\n\nReturn Values\n\nA named tuple with the following keys will be returned: simulator_session, hsm, simultator_exchange_driver_subject, fill_observable, chart_subject, strategy_subject, simulator_session_actor.\n\nExample\n\njulia> candle_observable = df_candles_observable(btcusd1m)\nIterableObservable(Candle, Vector{Candle}, Rocket.AsapScheduler)\n\njulia> @unpack simulator_session, chart_subject = simulate(candle_observable, HMAStrategy);\n\n\n\n\n\n","category":"method"},{"location":"#TradingPipeline.@hsm-Tuple{Any}","page":"Home","title":"TradingPipeline.@hsm","text":"@hsm strategy_subject\n\nGiven a StrategySubject instance, define the states and transitions for a MarketOrderStrategyStateMachine, and return the singleton instance of that state machine.\n\n\n\n\n\n","category":"macro"},{"location":"#TradingPipeline.@pnl-NTuple{4, Any}","page":"Home","title":"TradingPipeline.@pnl","text":"@pnl entry exit quantity leverage\n\nCalculate the profit/loss of a long positon.  The quantity and leverage are optional.\n\n\n\n\n\n","category":"macro"},{"location":"#TradingPipeline.@pnls-NTuple{4, Any}","page":"Home","title":"TradingPipeline.@pnls","text":"@pnls entry exit quantity leverage\n\nCalculate the profit/loss of a short positon.  The quantity and leverage are optional.\n\n\n\n\n\n","category":"macro"}]
}
